#include<iostream>
#include<string>
#include<fstream>
#include<windows.h>
#include<vector>
#include"Timer.h"
using namespace std;

/*
	Наибольшее произведение четырех последовательных цифр в нижеприведенном 1000-значном числе равно 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

	Найдите наибольшее произведение тринадцати последовательных цифр в данном числе.
*/
int Sum(const vector<int>& vec, const int Size, int start, int end)
{
	int Sum = 1;
	if (
		(end - start) % Size != 0 
		|| start > end 
		|| end >= vec.size())
	{
		cout << "Invalid range!" << endl;
		return 0;
	}
	else {
		for (int i = start; i <start+Size; i++)
		{
			Sum *= vec[i];
		}
		return Sum;
	}
}
//#define myTask//0.006055/0.005
int main()
{
	Timer timer;
#ifdef myTask
	double time_spend = 0.0;
	clock_t begin = clock();

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	string patch = "numbers.txt";
	ifstream fin;
	fin.open(patch);
	string str;
	vector<int>vec;
	if (!fin.is_open())cout << "Ошибка открытия фаила!" << endl;
	else
	{
		cout << "Фаил открыт!" << endl;
		while (!fin.eof())
		{
			getline(fin, str);
			cout << str << endl;
			for (int i = 0; i < str.length(); i++)
			{
				string temp = str.substr(i, 1);
				int num = stoi(temp);
				vec.push_back(num);
			}

		}
	}
	//cout << str << endl;
	fin.close();
	int sum = 0, result = 0;;
	for (int i = 0; i < vec.size(); i++)
	{

		sum = Sum(vec, 13, i, i + 13);
		if (result < sum)result = sum;
	}
	clock_t end = clock();
	time_spend = (double)(end - begin) / CLOCKS_PER_SEC;

	cout << "Answ:\t" << result << "\truntime: " << time_spend << endl;
	//cout <<"Сумма\t" << result << endl;  
#endif // myTask
	char num_str[] =
		"73167176531330624919225119674426574742355349194934"
		"96983520312774506326239578318016984801869478851843"
		"85861560789112949495459501737958331952853208805511"
		"12540698747158523863050715693290963295227443043557"
		"66896648950445244523161731856403098711121722383113"
		"62229893423380308135336276614282806444486645238749"
		"30358907296290491560440772390713810515859307960866"
		"70172427121883998797908792274921901699720888093776"
		"65727333001053367881220235421809751254540594752243"
		"52584907711670556013604839586446706324415722155397"
		"53697817977846174064955149290862569321978468622482"
		"83972241375657056057490261407972968652414535100474"
		"82166370484403199890008895243450658541227588666881"
		"16427171479924442928230863465674813919123162824586"
		"17866458359124566529476545682848912883142607690042"
		"24219022671055626321111109370544217506941658960408"
		"07198403850962455444362981230987879927244284909188"
		"84580156166097919133875499200524063689912560717606"
		"05886116467109405077541002256983155200055935729725"
		"71636269561882670428252483600823257530420752963450";
	long long answ = 0;
	long long prod = 1;
	char num_array[1000];
	//разбираем строку на массив
	for (int i = 0; i < 1000; i++)
	{
		char symb[] = { num_str[i],'\0' };
		num_array[i] = atoi(symb);
	}
	//перемножаем последовательность 13 цифр
	for (int i = 0; i < 987; i++)
	{
		prod = 1;
		for (int j = 0; j < 13; j++)
		{
			prod *= num_array[i + j];
			if (prod > answ)answ = prod;
		}
	}
	cout << answ << endl;

	return 0;
}